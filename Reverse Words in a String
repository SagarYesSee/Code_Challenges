Intuition
Given a string containing multiple words, we are tasked with reversing the letters in each word while preserving the order of the words in the string.

Approach
We can use the split() function to split the input string by its spaces, creating a list of individual words. Then, we can iterate over each word, reverse its order, and append it to a new string. Finally, we can strip the leading and trailing spaces from the string before returning it.

Complexity
Time complexity:
The time complexity of the solution is O(n * m), where n is the number of words in the input string and m is the average length of each word. This is because we need to iterate over each word in the string (n times), and for each word, we need to reverse its characters (which takes O(m) time). Therefore, the overall time complexity is proportional to the product of n and m.

Space complexity:
The space complexity of the solution is also O(n * m) because we are creating a new string to store the reversed words. The length of this new string will be the sum of the lengths of all the reversed words, which in the worst case is n * m. Additionally, we are also creating a string variable to store each individual word (which takes up O(m) space for each word), but this is only temporary and will be discarded after each word is reversed.

Code
```
class Solution:
    def reverseWords(self, s: str) -> str:
        arr = str()
        for i in s.split():
            word = i
            arr += ' '+word[::-1]
        return arr.strip()

s = "the input string"
sol = Solution()
print(sol.reverseWords(s))
```
